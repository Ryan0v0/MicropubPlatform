"""add roles

Revision ID: bcc5d784316e
Revises: cdf301ecf35d
Create Date: 2020-05-11 10:56:42.826455

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'bcc5d784316e'
down_revision = 'cdf301ecf35d'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('microcons',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('title', sa.String(length=255), nullable=True),
    sa.Column('summary', sa.String(length=255), nullable=True),
    sa.Column('author_id', sa.Integer(), nullable=True),
    sa.Column('timestamp', sa.DateTime(), nullable=True),
    sa.Column('views', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['author_id'], ['users.id'], name=op.f('fk_microcons_author_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_microcons'))
    )
    with op.batch_alter_table('microcons', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_microcons_timestamp'), ['timestamp'], unique=False)
        batch_op.create_index(batch_op.f('ix_microcons_title'), ['title'], unique=False)

    op.create_table('microcons_collects',
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('microcon_id', sa.Integer(), nullable=True),
    sa.Column('timestamp', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['microcon_id'], ['microcons.id'], name=op.f('fk_microcons_collects_microcon_id_microcons')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_microcons_collects_user_id_users'))
    )
    op.create_table('microcons_cons',
    sa.Column('microcon_id', sa.Integer(), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('timestamp', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['microcon_id'], ['microcons.id'], name=op.f('fk_microcons_cons_microcon_id_microcons')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_microcons_cons_user_id_users'))
    )
    op.create_table('microcons_likes',
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('microcon_id', sa.Integer(), nullable=True),
    sa.Column('timestamp', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['microcon_id'], ['microcons.id'], name=op.f('fk_microcons_likes_microcon_id_microcons')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_microcons_likes_user_id_users'))
    )
    op.create_table('microcons_micropubs',
    sa.Column('micropub_id', sa.Integer(), nullable=True),
    sa.Column('microcon_id', sa.Integer(), nullable=True),
    sa.Column('timestamp', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['microcon_id'], ['microcons.id'], name=op.f('fk_microcons_micropubs_microcon_id_microcons')),
    sa.ForeignKeyConstraint(['micropub_id'], ['micropubs.id'], name=op.f('fk_microcons_micropubs_micropub_id_micropubs'))
    )
    op.create_table('microcons_pors',
    sa.Column('microcon_id', sa.Integer(), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('timestamp', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['microcon_id'], ['microcons.id'], name=op.f('fk_microcons_pors_microcon_id_microcons')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_microcons_pors_user_id_users'))
    )
    op.create_table('micropubs_collects',
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('micropub_id', sa.Integer(), nullable=True),
    sa.Column('timestamp', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['micropub_id'], ['micropubs.id'], name=op.f('fk_micropubs_collects_micropub_id_micropubs')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_micropubs_collects_user_id_users'))
    )
    op.create_table('tags',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('content', sa.String(length=64), nullable=True),
    sa.Column('micropub_id', sa.Integer(), nullable=True),
    sa.Column('microcon_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['microcon_id'], ['microcons.id'], name=op.f('fk_tags_microcon_id_microcons')),
    sa.ForeignKeyConstraint(['micropub_id'], ['micropubs.id'], name=op.f('fk_tags_micropub_id_micropubs')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_tags'))
    )
    with op.batch_alter_table('tags', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_tags_content'), ['content'], unique=False)

    with op.batch_alter_table('comments', schema=None) as batch_op:
        batch_op.add_column(sa.Column('microcon_id', sa.Integer(), nullable=True))
        batch_op.create_foreign_key(batch_op.f('fk_comments_microcon_id_microcons'), 'microcons', ['microcon_id'], ['id'])

    with op.batch_alter_table('micropubs', schema=None) as batch_op:
        batch_op.add_column(sa.Column('reference', sa.String(length=255), nullable=True))
        batch_op.create_index(batch_op.f('ix_micropubs_title'), ['title'], unique=False)
        batch_op.drop_column('body')

    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.add_column(sa.Column('last_followeds_microcons_read_time', sa.DateTime(), nullable=True))
        batch_op.add_column(sa.Column('last_microcons_likes_read_time', sa.DateTime(), nullable=True))

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_column('last_microcons_likes_read_time')
        batch_op.drop_column('last_followeds_microcons_read_time')

    with op.batch_alter_table('micropubs', schema=None) as batch_op:
        batch_op.add_column(sa.Column('body', sa.TEXT(), nullable=True))
        batch_op.drop_index(batch_op.f('ix_micropubs_title'))
        batch_op.drop_column('reference')

    with op.batch_alter_table('comments', schema=None) as batch_op:
        batch_op.drop_constraint(batch_op.f('fk_comments_microcon_id_microcons'), type_='foreignkey')
        batch_op.drop_column('microcon_id')

    with op.batch_alter_table('tags', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_tags_content'))

    op.drop_table('tags')
    op.drop_table('micropubs_collects')
    op.drop_table('microcons_pors')
    op.drop_table('microcons_micropubs')
    op.drop_table('microcons_likes')
    op.drop_table('microcons_cons')
    op.drop_table('microcons_collects')
    with op.batch_alter_table('microcons', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_microcons_title'))
        batch_op.drop_index(batch_op.f('ix_microcons_timestamp'))

    op.drop_table('microcons')
    # ### end Alembic commands ###
